{"version":3,"sources":["features/trainer/model/testStage.ts","features/trainer/components/FarsiTrainer/FarsiTrainer.tsx","util/record.ts","features/lexicon/selectors/index.ts","features/trainer/selectors/index.ts","features/trainer/slice/trainingProgress.ts","features/trainer/slice/configuration.ts","features/trainer/slice/selectRandom.ts","features/trainer/slice/index.ts","components/Icons.tsx","features/trainer/components/ToggleText/ToggleText.tsx","features/trainer/components/GermanTrainer/GermanTrainer.tsx","features/trainer/components/NoTraining/NoTraining.tsx","features/trainer/components/Trainer/Trainer.tsx","features/trainer/components/Trainer/TrainerContainer.tsx","features/trainer/routes/index.tsx","routes/index.ts","components/Header.tsx","components/App.tsx","features/lexicon/slice/index.ts","reducers/index.ts","serviceWorker.ts","decodeUrl.ts","index.tsx"],"names":["TestStage","FarsiTrainer","React","Component","getKey","key","record","undefined","result","selectSlice","state","lexicon","selectLearningUnitRecord","createSelector","units","selectLearningUnits","Object","keys","map","k","trainer","selectCurrentLanguage","trainingUnit","lang","selectCurrentLearningUnit","id","selectCurrentTrainingProgress","trainingProgress","scoreDe","scoreFa","lastCorrectDe","lastCorrectFa","configuration","score","frequency","minGap","buildPartialSums","values","partialSums","Array","length","ongoingSum","i","getLast","array","defaultValue","slice","selectRandom","elements","weightProjection","rand","Math","random","weights","el","elementUpperBounds","totalWeight","selectedValue","selectedIndex","findIndex","sum","select","createAsyncThunk","_","getState","createSlice","name","initialState","reducers","pass","progress","getProgress","min","Date","toISOString","fail","max","extraReducers","fulfilled","type","payload","selectedUnit","unit","getPriority","buildTrainingUnit","Error","config","find","c","gap","getDifferenceFromNowInSeconds","date","differenceInSeconds","Number","POSITIVE_INFINITY","learningUnit","actions","Dash","width","height","viewBox","className","fill","xmlns","fillRule","d","HourglassSplit","Plus","ToggleText","expanded","this","props","title","value","onClick","setState","GermanTrainer","enteredTranslation","stage","Initial","event","preventDefault","isShowSolution","proceed","check","next","de","reportResult","getStageAfterCheck","Passed","PassedOnRetry","Retry","Failed","onSubmit","e","submit","isCountingAsFailure","isCountingAsSuccess","fa","faRm","Fragment","en","htmlFor","autoComplete","autoCorrect","autoCapitalize","onChange","target","renderButtons","solve","includes","NoTraining","Trainer","mapDispatchToProps","TrainerContainer","connect","path","component","Header","collapseRef","createRef","collapse","current","Collapse","toggle","ref","to","hide","App","basename","process","routes","fromEntries","vocabulary","v","rootReducer","combineReducers","Boolean","window","location","hostname","match","search","decoded","split","s","replace","join","replaceUrl","pathname","hash","history","replaceState","decodeUrl","persistedReducer","persistReducer","storage","version","reducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","hidden","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8bf4129.chunk.js","sourcesContent":["export enum TestStage {\n  Initial,\n  Retry,\n  Passed,\n  PassedOnRetry,\n  Failed,\n}","import React from 'react';\n\nexport class FarsiTrainer extends React.Component {\n  render(): JSX.Element {\n    return (\n      <div>\n        Hello FarsiTrainer\n      </div>\n    );\n  }\n}","export const getKey = <K extends string | number | symbol, T>\n  (key: K | null | undefined, record: Record<K, T>): T | null =>\n{\n  if (key === null || key === undefined) {\n    return null;\n  }\n  const result = record[key];\n  if (result === undefined) {\n    return null;\n  }\n  return result;\n};","import { createSelector } from '@reduxjs/toolkit';\nimport { State } from '../slice';\n\nconst selectSlice = (state: any): State => state.lexicon;\nexport default selectSlice;\n\nexport const selectLearningUnitRecord = createSelector([selectSlice],\n  ({ units }) => units\n);\n\nexport const selectLearningUnits = createSelector([selectLearningUnitRecord],\n  units => Object.keys(units).map(k => units[k as unknown as number])\n);\n","import { createSelector } from '@reduxjs/toolkit';\nimport { getKey } from '../../../util/record';\nimport { selectLearningUnitRecord } from '../../lexicon/selectors';\nimport { State } from '../slice';\nimport { buildEmptyProgress } from '../slice/trainingProgress';\n\nconst selectSlice = (state: any): State => state.trainer;\nexport default selectSlice;\n\nexport const selectCurrentLanguage = createSelector([selectSlice], ({ trainingUnit }) => trainingUnit?.lang ?? null);\n\nexport const selectCurrentLearningUnit = createSelector([selectSlice, selectLearningUnitRecord],\n  ({ trainingUnit }, units) => getKey(trainingUnit?.id, units)\n);\n\nexport const selectCurrentTrainingProgress = createSelector([selectSlice],\n  ({ trainingUnit, trainingProgress }) => getKey(trainingUnit?.id, trainingProgress) ?? buildEmptyProgress()\n);\n","import { TrainingProgress } from '../model/trainingProgress';\n\nexport const buildEmptyProgress = (): TrainingProgress => ({\n  scoreDe: 0,\n  scoreFa: 0,\n  lastCorrectDe: null,\n  lastCorrectFa: null,\n});","const configuration = [\n  { score: 0, frequency: 16, minGap: 60 },\n  { score: 1, frequency: 8, minGap: 5*60 },\n  { score: 2, frequency: 4, minGap: 30*60 },\n  { score: 3, frequency: 2, minGap: 3*60*60 },\n  { score: 4, frequency: 1, minGap: 24*60*60 },\n];\n\nexport default configuration;","const selectRandom = <T> (\n  elements: T[],\n  weightProjection: (el: T) => number,\n  rand = Math.random()\n): T | null => {\n  const weights = elements.map(el => weightProjection(el));\n  const elementUpperBounds = buildPartialSums(weights);\n  const totalWeight = getLast(elementUpperBounds, 0);\n\n  if (totalWeight === 0) {\n    return null;\n  }\n\n  const selectedValue = rand * totalWeight;\n  const selectedIndex = elementUpperBounds.findIndex(sum => selectedValue <= sum);\n  return elements[selectedIndex];\n};\n\nconst buildPartialSums = (values: number[]): number[] => {\n  const partialSums = new Array(values.length);\n  let ongoingSum = 0;\n  for (let i = 0; i < values.length; i++) {\n    ongoingSum += values[i];\n    partialSums[i] = ongoingSum;\n  }\n  return partialSums;\n};\n\nconst getLast = <T> (array: T[], defaultValue: T): T => {\n  if (array.length > 0) {\n    return array.slice(-1)[0];\n  } else {\n    return defaultValue;\n  }\n};\n\nexport default selectRandom;","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { differenceInSeconds } from 'date-fns';\nimport { LearningUnit } from '../../lexicon/model/learningUnit';\nimport { selectLearningUnits } from '../../lexicon/selectors';\nimport { TrainingProgress } from '../model/trainingProgress';\nimport { TrainingUnit } from '../model/trainingUnit';\nimport configuration from './configuration';\nimport selectRandom from './selectRandom';\nimport { buildEmptyProgress } from './trainingProgress';\n\nexport interface State {\n  trainingUnit: TrainingUnit | null;\n  trainingProgress: Record<number, TrainingProgress>;\n}\n\nconst initialState: State = {\n  // TODO: Set to null\n  trainingUnit: {\n    id: 0,\n    lang: 'de',\n  },\n  trainingProgress: {},\n};\n\nexport const select = createAsyncThunk(\n  'train/select',\n  (_, { getState }) => selectLearningUnits(getState())\n);\n\nconst slice = createSlice({\n  name: 'train',\n  initialState,\n  reducers: {\n    pass: (state: State): void => {\n      const progress = getProgress(state);\n      progress.scoreDe = Math.min(progress.scoreDe + 1, 5);\n      progress.lastCorrectDe = new Date().toISOString();\n    },\n    fail: (state: State): void => {\n      const progress = getProgress(state);\n      progress.scoreDe = Math.max(progress.scoreDe - 1, 0);\n    }\n  },\n  extraReducers: {\n    [select.fulfilled.type]: (state, { payload: units }: { payload: LearningUnit[] }): void => {\n      const { trainingProgress } = state;\n      const selectedUnit = selectRandom(units as LearningUnit[], unit => getPriority(trainingProgress[unit.id]));\n      state.trainingUnit = buildTrainingUnit(selectedUnit);\n    }\n  }\n});\n\nconst getProgress = ({ trainingUnit, trainingProgress }: State): TrainingProgress => {\n  if (trainingUnit === null) {\n    throw new Error('No training unit selected');\n  }\n\n  if (trainingProgress[trainingUnit.id] === undefined) {\n    trainingProgress[trainingUnit.id] = buildEmptyProgress();\n  }\n\n  return trainingProgress[trainingUnit.id];\n};\n\nconst getPriority = ({ scoreDe, lastCorrectDe }: TrainingProgress = buildEmptyProgress()): number => {\n  const config = configuration.find(c => c.score === scoreDe);\n  const gap = getDifferenceFromNowInSeconds(lastCorrectDe);\n\n  if (config !== undefined && gap > config.minGap) {\n    return config.frequency;\n  } else {\n    return 0;\n  }\n};\n\nconst getDifferenceFromNowInSeconds = (date: string | null): number => {\n  if (date !== null) {\n    return differenceInSeconds(new Date(), new Date(date));\n  } else {\n    return Number.POSITIVE_INFINITY;\n  }\n};\n\nconst buildTrainingUnit = (learningUnit: LearningUnit | null): TrainingUnit | null => {\n  if (learningUnit !== null) {\n    return {\n      id: learningUnit.id,\n      lang: 'de',\n    };\n  } else {\n    return null;\n  }\n};\n\nexport const { pass, fail } = slice.actions;\nexport default slice.reducer;","import React from 'react';\n\nexport const Dash = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-dash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z\"/>\n  </svg>\n);\n\nexport const HourglassSplit = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-hourglass-split\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0c0 .701.478 1.236 1.011 1.492A3.5 3.5 0 0 1 11.5 13s-.866-1.299-3-1.48V8.35z\"/>\n  </svg>\n);\n\nexport const Plus = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-plus\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\"/>\n  </svg>\n);\n","import React from 'react';\nimport { Dash, Plus } from '../../../../components/Icons';\n\nexport class ToggleText extends React.Component<{\n  title: string;\n  value: string;\n}, {\n  expanded: boolean;\n}> {\n  state = {\n    expanded: false,\n  };\n\n  render(): JSX.Element {\n    const { title, value } = this.props;\n    if (this.state.expanded) {\n      return (\n        <div className=\"cursor-pointer\"\n          onClick={(): void => this.setState({ expanded: false })}\n        >\n          <Dash></Dash> {title}: <em>{value}</em>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"cursor-pointer\"\n          onClick={(): void => this.setState({ expanded: true })}\n        >\n          <Plus></Plus> {title}\n        </div>\n      );\n    }\n  }\n}","import React from 'react';\nimport { LearningUnit } from '../../../lexicon/model/learningUnit';\nimport { TestStage } from '../../model/testStage';\nimport { TrainingProgress } from '../../model/trainingProgress';\nimport { ToggleText } from '../ToggleText/ToggleText';\n\nexport class GermanTrainer extends React.Component<{\n  progress: TrainingProgress;\n  unit: LearningUnit;\n  fail: () => void;\n  next: () => void;\n  pass: () => void;\n}, {\n  enteredTranslation: string;\n  stage: TestStage;\n}> {\n  state = {\n    enteredTranslation: '',\n    stage: TestStage.Initial,\n  };\n\n  private submit(event: React.FormEvent): void {\n    event.preventDefault();\n    if (this.isShowSolution()) {\n      this.proceed();\n    } else {\n      this.check();\n    }\n  }\n\n  private proceed(): void {\n    this.props.next();\n    this.setState({\n      enteredTranslation: '',\n      stage: TestStage.Initial,\n    });\n  }\n\n  private check(): void {\n    const pass = this.state.enteredTranslation === this.props.unit.de;\n    this.reportResult(pass);\n    this.setState({ stage: this.getStageAfterCheck(pass) });\n  }\n\n  private getStageAfterCheck(pass: boolean): TestStage {\n    if (!pass) {\n      return TestStage.Retry;\n    } else if (this.state.stage === TestStage.Initial) {\n      return TestStage.Passed;\n    } else {\n      return TestStage.PassedOnRetry;\n    }\n  }\n\n  private solve(): void {\n    this.reportResult(false);\n    this.setState({ stage: TestStage.Failed });\n  }\n\n  private reportResult(pass: boolean): void {\n    if (this.state.stage !== TestStage.Initial) {\n      return;\n    } else if (pass) {\n      this.props.pass();\n    } else {\n      this.props.fail();\n    }\n  }\n\n  render(): JSX.Element {\n    const { progress, unit } = this.props;\n    return (\n      <form onSubmit={(e): void => this.submit(e)}>\n        <h2>Deutsch trainieren</h2>\n        <div className=\"mb-3\">\n          <div>\n            Fortschritt\n          </div>\n          <div className={'form-control-plaintext'\n              + (this.isCountingAsFailure() ? ' text-danger' : '')\n              + (this.isCountingAsSuccess() ? ' text-success' : '')\n          }>\n            {progress.scoreDe}\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <div>\n            Persisch\n          </div>\n          <div className=\"form-control-plaintext text-large\">\n            {unit.fa}\n          </div>\n          <div className=\"form-text\">\n            <ToggleText title=\"Romanisierung\" value={unit.faRm}></ToggleText>\n          </div>\n        </div>\n        {this.isShowSolution() ? (\n          <React.Fragment>\n            <div className=\"mb-3\">\n              <div>Deutsch</div>\n              <div className=\"form-control-plaintext\">\n                {this.isCountingAsFailure()\n                  ? (\n                    <React.Fragment>\n                      <span className=\"text-danger text-decoration-line-through\">\n                        {this.state.enteredTranslation}\n                      </span>\n                      <span> </span>\n                    </React.Fragment>\n                  ) : null\n                }\n                <span className=\"text-success\">\n                  {unit.de}\n                </span>\n              </div>\n              <div className=\"form-text\">\n                <ToggleText title=\"Englisch\" value={unit.en}></ToggleText>\n              </div>\n            </div>\n          </React.Fragment>\n        ) : (\n          <div className=\"mb-3\">\n            <label htmlFor=\"german\">\n              Deutsch\n            </label>\n            <input type=\"text\"\n              id=\"german\"\n              className=\"form-control\"\n              value={this.state.enteredTranslation}\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n              onChange={(e): void => this.setState({ enteredTranslation: e.target.value })}\n            >\n            </input>\n            <div className=\"form-text\">\n              &nbsp;\n            </div>\n          </div>\n        )}\n        {this.renderButtons()}\n      </form>\n    );\n  }\n\n  private renderButtons(): JSX.Element {\n    if (this.isShowSolution()) {\n      return (\n        <div className=\"col\">\n          <button type=\"submit\"\n            className=\"btn btn-primary btn-block\"\n            key=\"proceed-btn\"\n          >\n            Weiter\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <div className=\"row mb-2\">\n            <div className=\"col-6 col-sm-4\">\n              <button type=\"button\"\n                className=\"btn btn-secondary btn-block\"\n                key=\"solve-btn\"\n                onClick={(): void => this.solve()}\n              >\n                Auflösen\n              </button>\n            </div>\n            <div className=\"col-6 col-sm-8\">\n              <button type=\"submit\"\n                className=\"btn btn-primary btn-block\"\n                key=\"chck-btn\"\n              >\n                Überprüfen\n              </button>\n            </div>\n          </div>\n          {this.state.stage === TestStage.Initial\n            ? (\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button type=\"button\"\n                    className=\"btn btn-link btn-block\"\n                    key=\"skip-btn\"\n                    onClick={(): void => this.proceed()}\n                  >\n                    Überspringen\n                  </button>\n                </div>\n              </div>\n            ) : ''\n          }\n        </React.Fragment>\n      );\n    }\n  }\n\n  private isShowSolution(): boolean {\n    return [\n      TestStage.Passed,\n      TestStage.PassedOnRetry,\n      TestStage.Failed\n    ].includes(this.state.stage);\n  }\n\n  private isCountingAsFailure(): boolean {\n    return [\n      TestStage.PassedOnRetry,\n      TestStage.Retry,\n      TestStage.Failed\n    ].includes(this.state.stage);\n  }\n\n  private isCountingAsSuccess(): boolean {\n    return [\n      TestStage.Passed\n    ].includes(this.state.stage);\n  }\n}","import React, { FormEvent } from 'react';\nimport { HourglassSplit } from '../../../../components/Icons';\nimport './NoTraining.scss';\n\nexport const NoTraining = (props: {\n  next: () => void;\n}): JSX.Element => (\n  <form onSubmit={(e: FormEvent): void => { e.preventDefault(); props.next(); }}>\n    <div className=\"no-training\">\n      <HourglassSplit></HourglassSplit>\n      <p>Zur Zeit gibt es nichts zu üben.</p>\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Aktualisieren\n      </button>\n    </div>\n  </form>\n);","import React from 'react';\nimport { LearningUnit } from '../../../lexicon/model/learningUnit';\nimport { TrainingProgress } from '../../model/trainingProgress';\nimport { TrainingUnitLang } from '../../model/trainingUnit';\nimport { GermanTrainer } from '../GermanTrainer/GermanTrainer';\nimport { NoTraining } from '../NoTraining/NoTraining';\n\nexport class Trainer extends React.Component<{\n  lang: TrainingUnitLang | null;\n  progress: TrainingProgress;\n  unit: LearningUnit | null;\n  fail: () => void;\n  next: () => void;\n  pass: () => void;\n}> {\n  componentDidMount(): void {\n    this.props.next();\n  }\n\n  render(): JSX.Element {\n    const { lang, progress, unit, fail, next, pass } = this.props;\n    if (lang === 'de' && unit !== null) {\n      return <GermanTrainer\n        unit={unit}\n        progress={progress}\n        pass={pass}\n        fail={fail}\n        next={next}\n      ></GermanTrainer>;\n    } else {\n      return <NoTraining\n        next={this.props.next}\n      ></NoTraining>;\n    }\n  }\n}","import { connect } from 'react-redux';\nimport { selectCurrentLanguage, selectCurrentLearningUnit, selectCurrentTrainingProgress } from '../../selectors';\nimport { fail, pass, select } from '../../slice';\nimport { Trainer } from './Trainer';\n\nconst mapStateToProps = (state: any): any => ({\n  lang: selectCurrentLanguage(state),\n  progress: selectCurrentTrainingProgress(state),\n  unit: selectCurrentLearningUnit(state),\n});\n\nconst mapDispatchToProps = {\n  fail: fail,\n  next: select,\n  pass: pass,\n};\n\nexport const TrainerContainer =\n  connect(mapStateToProps, mapDispatchToProps)(Trainer);","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { FarsiTrainer } from '../components/FarsiTrainer/FarsiTrainer';\nimport { TrainerContainer } from '../components/Trainer/TrainerContainer';\n\nexport default [\n  <Route key=\"trainer-german\"\n    path=\"/trainer/german\"\n    component={TrainerContainer}>\n  </Route>,\n  <Route key=\"trainer-farsi\"\n    path=\"/trainer/farsi\"\n    component={FarsiTrainer}>\n  </Route>,\n];","import trainer from '../features/trainer/routes';\n\nexport default [\n  ...trainer\n];","import { Collapse } from 'bootstrap';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Header extends React.Component {\n  private collapseRef = React.createRef<HTMLDivElement>();\n  private collapse?: Collapse;\n\n  componentDidMount(): void {\n    if (this.collapseRef.current) {\n      this.collapse = new Collapse(this.collapseRef.current, {\n        toggle: false\n      });\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-primary mb-2\">\n        <div className=\"container\">\n          <span className=\"navbar-brand mb-0 h1\">\n            Persian Learner\n          </span>\n          <button type=\"button\"\n            className=\"navbar-toggler\"\n            onClick={(): void => this.collapse?.toggle()}\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div\n            id=\"navbar-content\"\n            className=\"collapse navbar-collapse\"\n            ref={this.collapseRef}\n          >\n            <ul className=\"navbar-nav mr-auto mb-0\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\"\n                  to=\"/trainer/german\"\n                  onClick={(): void => this.collapse?.hide()}\n                >\n                  Deutsch trainieren\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\"\n                  to=\"/trainer/farsi\"\n                  onClick={(): void => this.collapse?.hide()}\n                >\n                  Persisch trainieren\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport routes from '../routes';\nimport { Header } from './Header';\n\nexport class App extends React.Component {\n  render(): JSX.Element {\n    return (\n      <BrowserRouter basename={process.env.REACT_APP_BASE_HREF}>\n        <header>\n          <Header></Header>\n        </header>\n        <main className=\"container\">\n          { routes }\n        </main>\n      </BrowserRouter>\n    );\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport { LearningUnit } from '../model/learningUnit';\nimport vocabulary from './vocabulary.json';\n\nexport interface State {\n  units: Record<number, LearningUnit>;\n}\n\nconst initialState: State = {\n  units: Object.fromEntries(\n    (vocabulary as LearningUnit[]).map(v => [v.id, v])\n  )\n};\n\nconst slice = createSlice({\n  name: 'lexicon',\n  initialState,\n  reducers: {\n  }\n});\n\nexport default slice.reducer;","import { combineReducers } from '@reduxjs/toolkit';\nimport lexicon from '../features/lexicon/slice';\nimport trainer from '../features/trainer/slice';\n\nconst rootReducer = combineReducers({\n  lexicon,\n  trainer\n});\n\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Single Page Apps for GitHub Pages\n// MIT License\n// https://github.com/rafgraph/spa-github-pages\n// This script checks to see if a redirect is present in the query string,\n// converts it back into the correct url and adds it to the\n// browser's history using window.history.replaceState(...),\n// which won't cause the browser to attempt to load the new url.\n// When the single page app is loaded further down in this file,\n// the correct url will be waiting in the browser's history for\n// the single page app to route accordingly.\n\nexport default (): void => {\n  const location = window.location;\n  if (location.search[1] === '/' ) {\n    const decoded = location.search\n      .slice(1)\n      .split('&')\n      .map((s) => s.replace(/~and~/g, '&'))\n      .join('?');\n    const replaceUrl = location.pathname.slice(0, -1) + decoded + location.hash;\n    window.history.replaceState(null, null as any, replaceUrl);\n  }\n};\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport { version } from '../package.json';\nimport { App } from './components/App';\nimport decodeUrl from './decodeUrl';\nimport './index.scss';\nimport reducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'production') {\n  decodeUrl();\n}\n\nconst persistedReducer = persistReducer({\n  key: 'root',\n  storage,\n  version: 1\n}, reducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <span className=\"version\" hidden>\n      {version}-{process.env.NODE_ENV}\n    </span>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}