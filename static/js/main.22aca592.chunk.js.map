{"version":3,"sources":["features/train/model/testStage.ts","features/train/selectors/index.ts","features/train/slice/index.ts","util/math.ts","util/random.ts","features/train/components/Icons.tsx","features/train/components/ToggleText/ToggleText.tsx","features/train/components/TrainGerman/TrainGerman.tsx","features/train/components/TrainGerman/TrainGermanContainer.tsx","features/train/components/TrainPhoneticPersian/TrainPhoneticPersian.tsx","features/train/routes/index.tsx","routes/index.ts","components/Header.tsx","components/App.tsx","reducers/index.ts","serviceWorker.ts","decodeUrl.ts","index.tsx"],"names":["TestStage","selectSlice","state","train","selectedDe","createSelector","units","selectedIdDe","selected","find","unit","id","Error","initialState","map","vocab","i","progress","scoreDe","scoreFaPh","lastCorrectDe","lastCorrectFaPh","slice","createSlice","name","reducers","selectDe","array","project","minScore","Math","min","el","eligableUnits","filter","floor","random","length","selectRandomEntry","passDe","getProgress","Date","toISOString","failDe","max","u","actions","Plus","width","height","viewBox","className","fill","xmlns","fillRule","d","Dash","ToggleText","expanded","this","props","title","value","onClick","setState","React","Component","TrainGerman","enteredTranslation","stage","Initial","event","preventDefault","isShowSolution","proceed","check","pass","de","reportResult","getStageAfterCheck","Passed","PassedOnRetry","Retry","Failed","fail","onSubmit","e","submit","isCountingAsFailure","isCountingAsSuccess","fa","faRm","Fragment","en","htmlFor","type","onChange","target","renderButtons","key","solve","includes","mapDispatchToProps","TrainGermanContainer","connect","TrainPhoneticPersian","path","component","Header","collapseRef","createRef","collapse","current","Collapse","toggle","ref","to","hide","App","basename","process","routes","rootReducer","combineReducers","Boolean","window","location","hostname","match","search","decoded","split","s","replace","join","replaceUrl","pathname","hash","history","replaceState","decodeUrl","persistedReducer","persistReducer","storage","version","reducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","hidden","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22aca592.chunk.js","sourcesContent":["export enum TestStage {\n  Initial,\n  Retry,\n  Passed,\n  PassedOnRetry,\n  Failed,\n}","import { createSelector } from '@reduxjs/toolkit';\nimport { State } from '../slice';\n\nconst selectSlice = (state: any): State => state.train;\n\nexport const selectedDe = createSelector([selectSlice], ({ units, selectedIdDe }) => {\n  const selected = units.find(unit => unit.id === selectedIdDe);\n  if (!selected) {\n    throw new Error(`Selected learning unit (DE) with id ${selectedIdDe} does not exist.`);\n  }\n  return selected;\n});\n\nexport default selectSlice;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { min } from '../../../util/math';\nimport { selectRandomEntry } from '../../../util/random';\nimport { LearningProgress, LearningUnit } from '../model/learningUnit';\nimport vocabulary from './vocabulary.json';\n\nexport interface State {\n  units: LearningUnit[];\n  selectedIdDe: number;\n}\n\nconst learningUnits = vocabulary.map((vocab, i) => ({\n  ...(vocab as Pick<LearningUnit, 'type' | 'de' | 'en' | 'fa' | 'faRm'>),\n  id: i,\n  progress: {\n    scoreDe: 0,\n    scoreFaPh: 0,\n    lastCorrectDe: null,\n    lastCorrectFaPh: null,\n  },\n}));\n\nconst initialState: State = {\n  units: learningUnits,\n  selectedIdDe: 0,\n};\n\nconst slice = createSlice({\n  name: 'train',\n  initialState,\n  reducers: {\n    selectDe: (state): void => {\n      const minScore = min(state.units, unit => unit.progress.scoreDe);\n      const eligableUnits = state.units.filter(unit => unit.progress.scoreDe === minScore);\n      state.selectedIdDe = selectRandomEntry(eligableUnits).id;\n    },\n    passDe: ({ units, selectedIdDe }): void => {\n      const progress = getProgress(units, selectedIdDe);\n      progress.scoreDe = Math.min(progress.scoreDe + 1, 5);\n      progress.lastCorrectDe = new Date().toISOString();\n    },\n    failDe: ({ units, selectedIdDe }): void => {\n      const progress = getProgress(units, selectedIdDe);\n      progress.scoreDe = Math.max(progress.scoreDe - 1, 0);\n    }\n  }\n});\n\nconst getProgress = (state: LearningUnit[], id: number): LearningProgress => {\n  const unit = state.find(u => u.id === id);\n  if (!unit) {\n    throw new Error(`Learning unit with id ${id} does not exist.`);\n  }\n  return unit.progress;\n};\n\nexport const { passDe, failDe, selectDe } = slice.actions;\nexport default slice.reducer;","export const min = <T> (array: T[], project: (el: T) => number): number => {\n  return Math.min(...array.map(el => project(el)));\n};","export const selectRandomEntry = <T> (array: T[]): T => {\n  const selectedIndex = Math.floor(Math.random() * array.length);\n  return array[selectedIndex];\n};","import React from 'react';\n\nexport const Plus = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-plus\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\"/>\n  </svg>\n);\n\nexport const Dash = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-dash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z\"/>\n  </svg>\n);","import React from 'react';\nimport { Dash, Plus } from '../Icons';\n\nexport class ToggleText extends React.Component<{\n  title: string;\n  value: string;\n}, {\n  expanded: boolean;\n}> {\n  state = {\n    expanded: false,\n  };\n\n  render(): JSX.Element {\n    const { title, value } = this.props;\n    if (this.state.expanded) {\n      return (\n        <div className=\"cursor-pointer\"\n          onClick={(): void => this.setState({ expanded: false })}\n        >\n          <Dash></Dash> {title}: <em>{value}</em>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"cursor-pointer\"\n          onClick={(): void => this.setState({ expanded: true })}\n        >\n          <Plus></Plus> {title}\n        </div>\n      );\n    }\n  }\n}","import React from 'react';\nimport { LearningUnit } from '../../model/learningUnit';\nimport { TestStage } from '../../model/testStage';\nimport { ToggleText } from '../ToggleText/ToggleText';\n\nexport class TrainGerman extends React.Component<{\n  unit: LearningUnit;\n  pass: () => void;\n  fail: () => void;\n  proceed: () => void;\n},\n{\n  enteredTranslation: string;\n  stage: TestStage;\n}> {\n  state = {\n    enteredTranslation: '',\n    stage: TestStage.Initial,\n  };\n\n  private submit(event: React.FormEvent): void {\n    event.preventDefault();\n    if (this.isShowSolution()) {\n      this.proceed();\n    } else {\n      this.check();\n    }\n  }\n\n  private proceed(): void {\n    this.props.proceed();\n    this.setState({\n      enteredTranslation: '',\n      stage: TestStage.Initial,\n    });\n  }\n\n  private check(): void {\n    const pass = this.state.enteredTranslation === this.props.unit.de;\n    this.reportResult(pass);\n    this.setState({ stage: this.getStageAfterCheck(pass) });\n  }\n\n  private getStageAfterCheck(pass: boolean): TestStage {\n    if (!pass) {\n      return TestStage.Retry;\n    } else if (this.state.stage === TestStage.Initial) {\n      return TestStage.Passed;\n    } else {\n      return TestStage.PassedOnRetry;\n    }\n  }\n\n  private solve(): void {\n    this.reportResult(false);\n    this.setState({ stage: TestStage.Failed });\n  }\n\n  private reportResult(pass: boolean): void {\n    if (this.state.stage !== TestStage.Initial) {\n      return;\n    } else if (pass) {\n      this.props.pass();\n    } else {\n      this.props.fail();\n    }\n  }\n\n  render(): JSX.Element {\n    const { unit } = this.props;\n    return (\n      <form onSubmit={(e): void => this.submit(e)}>\n        <h2>Deutsch trainieren</h2>\n        <div className=\"mb-3\">\n          <div>\n            Fortschritt\n          </div>\n          <div className={'form-control-plaintext'\n              + (this.isCountingAsFailure() ? ' text-danger' : '')\n              + (this.isCountingAsSuccess() ? ' text-success' : '')\n          }>\n            {unit.progress.scoreDe}\n          </div>\n        </div>\n        <div className=\"mb-3\">\n          <div>\n            Persisch\n          </div>\n          <div className=\"form-control-plaintext text-large\">\n            {unit.fa}\n          </div>\n          <div className=\"form-text\">\n            <ToggleText title=\"Romanisierung\" value={unit.faRm}></ToggleText>\n          </div>\n        </div>\n        {this.isShowSolution() ? (\n          <React.Fragment>\n            <div className=\"mb-3\">\n              <div>Deutsch</div>\n              <div className=\"form-control-plaintext\">\n                {this.isCountingAsFailure()\n                  ? (\n                    <React.Fragment>\n                      <span className=\"text-danger text-decoration-line-through\">\n                        {this.state.enteredTranslation}\n                      </span>\n                      <span> </span>\n                    </React.Fragment>\n                  ) : null\n                }\n                <span className=\"text-success\">\n                  {unit.de}\n                </span>\n              </div>\n              <div className=\"form-text\">\n                <ToggleText title=\"Englisch\" value={unit.en}></ToggleText>\n              </div>\n            </div>\n          </React.Fragment>\n        ) : (\n          <div className=\"mb-3\">\n            <label htmlFor=\"german\">\n              Deutsch\n            </label>\n            <input type=\"text\"\n              id=\"german\"\n              className=\"form-control\"\n              value={this.state.enteredTranslation}\n              onChange={(e): void => this.setState({ enteredTranslation: e.target.value })}\n            >\n            </input>\n            <div className=\"form-text\">\n              &nbsp;\n            </div>\n          </div>\n        )}\n        {this.renderButtons()}\n      </form>\n    );\n  }\n\n  private renderButtons(): JSX.Element {\n    if (this.isShowSolution()) {\n      return (\n        <div className=\"col\">\n          <button type=\"submit\"\n            className=\"btn btn-primary btn-block\"\n            key=\"proceed-btn\"\n          >\n            Weiter\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <div className=\"row mb-2\">\n            <div className=\"col-6 col-sm-4\">\n              <button type=\"button\"\n                className=\"btn btn-secondary btn-block\"\n                key=\"solve-btn\"\n                onClick={(): void => this.solve()}\n              >\n                Auflösen\n              </button>\n            </div>\n            <div className=\"col-6 col-sm-8\">\n              <button type=\"submit\"\n                className=\"btn btn-primary btn-block\"\n                key=\"chck-btn\"\n              >\n                Überprüfen\n              </button>\n            </div>\n          </div>\n          {this.state.stage === TestStage.Initial\n            ? (\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button type=\"button\"\n                    className=\"btn btn-link btn-block\"\n                    key=\"skip-btn\"\n                    onClick={(): void => this.proceed()}\n                  >\n                    Überspringen\n                  </button>\n                </div>\n              </div>\n            ) : ''\n          }\n        </React.Fragment>\n      );\n    }\n  }\n\n  private isShowSolution(): boolean {\n    return [\n      TestStage.Passed,\n      TestStage.PassedOnRetry,\n      TestStage.Failed\n    ].includes(this.state.stage);\n  }\n\n  private isCountingAsFailure(): boolean {\n    return [\n      TestStage.PassedOnRetry,\n      TestStage.Retry,\n      TestStage.Failed\n    ].includes(this.state.stage);\n  }\n\n  private isCountingAsSuccess(): boolean {\n    return [\n      TestStage.Passed\n    ].includes(this.state.stage);\n  }\n}","import { connect } from 'react-redux';\nimport { selectedDe } from '../../selectors';\nimport { failDe, passDe, selectDe } from '../../slice';\nimport { TrainGerman } from './TrainGerman';\n\nconst mapStateToProps = (state: any): any => ({\n  unit: selectedDe(state)\n});\n\nconst mapDispatchToProps = {\n  pass: passDe,\n  fail: failDe,\n  proceed: selectDe,\n};\n\nexport const TrainGermanContainer =\n  connect(mapStateToProps, mapDispatchToProps)(TrainGerman);","import React from 'react';\n\nexport class TrainPhoneticPersian extends React.Component {\n  render(): JSX.Element {\n    return (\n      <div>\n        Hello TrainPhoneticPersian\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { TrainGermanContainer } from '../components/TrainGerman/TrainGermanContainer';\nimport { TrainPhoneticPersian } from '../components/TrainPhoneticPersian/TrainPhoneticPersian';\n\nexport default [\n  <Route key=\"train-german\"\n    path=\"/train/german\"\n    component={TrainGermanContainer}>\n  </Route>,\n  <Route key=\"train-phonetic-persian\"\n    path=\"/train/phonetic-persian\"\n    component={TrainPhoneticPersian}>\n  </Route>,\n];","import train from '../features/train/routes';\n\nexport default [\n  ...train\n];","import { Collapse } from 'bootstrap';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Header extends React.Component {\n  private collapseRef = React.createRef<HTMLDivElement>();\n  private collapse?: Collapse;\n\n  componentDidMount(): void {\n    if (this.collapseRef.current) {\n      this.collapse = new Collapse(this.collapseRef.current, {\n        toggle: false\n      });\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-primary mb-2\">\n        <div className=\"container\">\n          <span className=\"navbar-brand mb-0 h1\">\n            Persian Learner\n          </span>\n          <button type=\"button\"\n            className=\"navbar-toggler\"\n            onClick={(): void => this.collapse?.toggle()}\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div\n            id=\"navbar-content\"\n            className=\"collapse navbar-collapse\"\n            ref={this.collapseRef}\n          >\n            <ul className=\"navbar-nav mr-auto mb-0\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\"\n                  to=\"/train/german\"\n                  onClick={(): void => this.collapse?.hide()}\n                >\n                  Deutsch trainieren\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\"\n                  to=\"/train/phonetic-persian\"\n                  onClick={(): void => this.collapse?.hide()}\n                >\n                  Persisch trainieren\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport routes from '../routes';\nimport { Header } from './Header';\n\nexport class App extends React.Component {\n  render(): JSX.Element {\n    return (\n      <BrowserRouter basename={process.env.REACT_APP_BASE_HREF}>\n        <header>\n          <Header></Header>\n        </header>\n        <main className=\"container\">\n          { routes }\n        </main>\n      </BrowserRouter>\n    );\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport train from '../features/train/slice';\n\nconst rootReducer = combineReducers({\n  train\n});\n\nexport default rootReducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Single Page Apps for GitHub Pages\n// MIT License\n// https://github.com/rafgraph/spa-github-pages\n// This script checks to see if a redirect is present in the query string,\n// converts it back into the correct url and adds it to the\n// browser's history using window.history.replaceState(...),\n// which won't cause the browser to attempt to load the new url.\n// When the single page app is loaded further down in this file,\n// the correct url will be waiting in the browser's history for\n// the single page app to route accordingly.\n\nexport default (): void => {\n  const location = window.location;\n  if (location.search[1] === '/' ) {\n    const decoded = location.search\n      .slice(1)\n      .split('&')\n      .map((s) => s.replace(/~and~/g, '&'))\n      .join('?');\n    const replaceUrl = location.pathname.slice(0, -1) + decoded + location.hash;\n    window.history.replaceState(null, null as any, replaceUrl);\n  }\n};\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport { version } from '../package.json';\nimport { App } from './components/App';\nimport decodeUrl from './decodeUrl';\nimport './index.scss';\nimport reducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'production') {\n  decodeUrl();\n}\n\nconst persistedReducer = persistReducer({\n  key: 'root',\n  storage,\n  version: 1\n}, reducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <span className=\"version\" hidden>\n      {version}-{process.env.NODE_ENV}\n    </span>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}