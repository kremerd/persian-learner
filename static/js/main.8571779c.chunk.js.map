{"version":3,"sources":["features/trainer/model/testStage.ts","features/notification/selectors/index.ts","features/notification/slice/index.ts","features/notification/components/Toast/Toast.tsx","features/notification/components/Toastr/ToastrContainer.tsx","features/notification/components/Toastr/Toastr.tsx","util/record.ts","features/lexicon/selectors/index.ts","features/trainer/slice/trainingProgress.ts","features/trainer/selectors/index.ts","features/trainer/slice/configuration.ts","features/trainer/slice/selectRandom.ts","features/trainer/slice/index.ts","components/Icons.tsx","features/trainer/components/ToggleText/ToggleText.tsx","features/trainer/components/ScoreBadge/ScoreBadge.tsx","features/trainer/components/LangTrainer/BaseTrainer.tsx","features/trainer/components/LangTrainer/FarsiTrainer.tsx","features/trainer/components/LangTrainer/GermanTrainer.tsx","features/trainer/components/NoTraining/NoTraining.tsx","features/trainer/components/Trainer/Trainer.tsx","features/trainer/components/Trainer/TrainerContainer.tsx","features/trainer/routes/index.tsx","routes/index.tsx","components/Header.tsx","components/App.tsx","features/lexicon/slice/index.ts","reducers/index.ts","serviceWorker.ts","decodeUrl.ts","index.tsx"],"names":["TestStage","selectSlice","state","notification","selectNotifications","createSelector","notifications","slice","createSlice","name","initialState","nextId","reducers","addNotification","payload","push","id","message","removeNotification","filter","n","actions","Toast","toastRef","React","createRef","height","toastEl","this","current","BootstrapToast","show","addEventListener","setState","duration","easing","onAnimationEnd","props","clear","className","role","aria-live","aria-atomic","ref","type","data-dismiss","aria-label","Component","mapDispatchToProps","ToastrContainer","connect","map","key","getKey","record","undefined","result","lexicon","selectLearningUnitRecord","units","selectLearningUnits","Object","keys","k","buildEmptyProgress","de","buildEmptyLangProgress","fa","score","lastCorrect","lastTried","trainer","selectCurrentLanguage","trainingUnit","lang","selectCurrentLearningUnit","selectCurrentTrainingProgress","trainingProgress","selectCurrentLangProgress","configuration","frequency","minGap","buildPartialSums","values","partialSums","Array","length","ongoingSum","i","getLast","array","defaultValue","selectRandom","elements","weightProjection","rand","Math","random","weights","el","elementUpperBounds","totalWeight","selectedValue","selectedIndex","findIndex","sum","select","createAsyncThunk","_","getState","pass","progress","getLangProgress","min","Date","toISOString","fail","max","extraReducers","fulfilled","trainingUnits","getTrainingUnits","flat","selectedUnit","unit","priority","copyTrainingUnit","Error","languages","getPriority","config","find","c","gap","getDifferenceFromNowInSeconds","date","differenceInSeconds","Number","POSITIVE_INFINITY","ArrowDown","width","viewBox","fill","xmlns","fillRule","d","ArrowUp","Dash","HourglassSplit","Plus","ToggleText","expanded","title","value","onClick","ScoreBadge","increased","decreased","BaseTrainer","inputRef","submitRef","enteredTranslation","stage","Initial","focus","onSubmit","e","submit","renderTask","isShowSolution","renderSolution","renderSolutionContent","renderSolutionInput","renderButtons","Fragment","isWrongSolution","isCountingAsSuccess","getCorrectSolution","isCountingAsFailure","getSolutionInputConfig","label","large","htmlFor","autoComplete","autoCorrect","autoCapitalize","onChange","target","solve","proceed","event","preventDefault","check","next","reportResult","getStageAfterCheck","Passed","PassedOnRetry","Retry","Failed","includes","FarsiTrainer","en","content","faRm","GermanTrainer","NoTraining","Trainer","TrainerContainer","path","component","from","to","Header","collapseRef","collapse","Collapse","toggle","hide","App","basename","process","routes","fromEntries","vocabulary","v","rootReducer","combineReducers","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","search","decoded","split","s","replace","join","replaceUrl","pathname","hash","history","replaceState","decodeUrl","persistedReducer","persistReducer","storage","version","reducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","hidden","loading","document","getElementById","URL","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","dispatch"],"mappings":"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","file":"static/js/main.8571779c.chunk.js","sourcesContent":["export enum TestStage {\n  Initial,\n  Retry,\n  Passed,\n  PassedOnRetry,\n  Failed,\n}\n","import { createSelector } from '@reduxjs/toolkit';\nimport { State } from '../slice';\n\nconst selectSlice = (state: any): State => state.notification;\nexport default selectSlice;\n\nexport const selectNotifications = createSelector([selectSlice], ({ notifications }) => notifications);\n","import { createSlice } from '@reduxjs/toolkit';\nimport { Notification } from '../model/notification';\n\nexport interface State {\n  nextId: number;\n  notifications: Notification[];\n}\n\nconst initialState: State = {\n  nextId: 0,\n  notifications: [],\n};\n\nconst slice = createSlice({\n  name: 'notification',\n  initialState,\n  reducers: {\n    addNotification: (state: State, { payload }: { payload: string }): void => {\n      state.notifications.push({ id: state.nextId, message: payload });\n      state.nextId++;\n    },\n    removeNotification: (state: State, { payload }: { payload: number }): void => {\n      state.notifications = state.notifications.filter(n => n.id !== payload);\n    },\n  },\n});\n\nexport const { addNotification, removeNotification } = slice.actions;\nexport default slice.reducer;\n","import { Toast as BootstrapToast } from 'bootstrap';\nimport React from 'react';\nimport AnimateHeight from 'react-animate-height';\n\nexport class Toast extends React.Component<{\n  message: string;\n  clear: () => void;\n}, {\n  height: string | number;\n}> {\n  private toastRef = React.createRef<HTMLDivElement>();\n\n  state = {\n    height: 'auto'\n  };\n\n  componentDidMount(): void {\n    const toastEl = this.toastRef.current;\n    if (toastEl) {\n      const toast = new BootstrapToast(toastEl) as BootstrapToast & { show: () => void };\n      toast.show();\n      toastEl.addEventListener('hidden.bs.toast', () => this.setState({ height: 0 }));\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <AnimateHeight\n        height={this.state.height}\n        duration={300}\n        easing=\"ease-out\"\n        onAnimationEnd={(): void => this.props.clear()}\n      >\n        <div className=\"toast d-flex align-items-center bg-primary text-white\"\n          role=\"alert\"\n          aria-live=\"assertive\"\n          aria-atomic=\"true\"\n          ref={this.toastRef}\n        >\n          <div className=\"toast-body\">\n            {this.props.message}\n          </div>\n          <button type=\"button\"\n            className=\"btn-close ml-auto mr-2\"\n            data-dismiss=\"toast\"\n            aria-label=\"Schließen\"\n          ></button>\n        </div>\n      </AnimateHeight>\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport { Notification } from '../../model/notification';\nimport { selectNotifications } from '../../selectors';\nimport { removeNotification } from '../../slice';\nimport { Toastr } from './Toastr';\n\nconst mapStateToProps = (state: any): any => ({\n  notifications: selectNotifications(state),\n});\n\nconst mapDispatchToProps = {\n  clear: removeNotification,\n};\n\nexport const ToastrContainer =\n  connect<{ notifications: Notification[] }, { clear: (id: number) => void }, {}>(mapStateToProps, mapDispatchToProps)(Toastr);\n","import React from 'react';\nimport { Notification } from '../../model/notification';\nimport { Toast } from '../Toast/Toast';\nimport './Toastr.scss';\n\nexport const Toastr = ({ notifications, clear }: {\n  notifications: Notification[];\n  clear: (idx: number) => void;\n}): JSX.Element => (\n  <div className=\"toastr\">\n    {notifications.map(notification => (\n      <Toast\n        clear={(): void => clear(notification.id)}\n        message={notification.message}\n        key={`toast-${notification.id}`}\n      ></Toast>\n    ))}\n  </div>\n);\n","export const getKey = <K extends string | number | symbol, T>\n  (key: K | null | undefined, record: Record<K, T>): T | null =>\n{\n  if (key === null || key === undefined) {\n    return null;\n  }\n  const result = record[key];\n  if (result === undefined) {\n    return null;\n  }\n  return result;\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { State } from '../slice';\n\nconst selectSlice = (state: any): State => state.lexicon;\nexport default selectSlice;\n\nexport const selectLearningUnitRecord = createSelector([selectSlice],\n  ({ units }) => units\n);\n\nexport const selectLearningUnits = createSelector([selectLearningUnitRecord],\n  units => Object.keys(units).map(k => units[k as unknown as number])\n);\n","import { LangProgress, TrainingProgress } from '../model/trainingProgress';\n\nexport const buildEmptyProgress = (): TrainingProgress => ({\n  de: buildEmptyLangProgress(),\n  fa: buildEmptyLangProgress(),\n});\n\nconst buildEmptyLangProgress = (): LangProgress => ({\n  score: 0,\n  lastCorrect: null,\n  lastTried: null,\n});\n","import { createSelector } from '@reduxjs/toolkit';\nimport { getKey } from '../../../util/record';\nimport { selectLearningUnitRecord } from '../../lexicon/selectors';\nimport { State } from '../slice';\nimport { buildEmptyProgress } from '../slice/trainingProgress';\n\nconst selectSlice = (state: any): State => state.trainer;\nexport default selectSlice;\n\nexport const selectCurrentLanguage = createSelector([selectSlice], ({ trainingUnit }) => trainingUnit?.lang ?? null);\n\nexport const selectCurrentLearningUnit = createSelector([selectSlice, selectLearningUnitRecord],\n  ({ trainingUnit }, units) => getKey(trainingUnit?.id, units)\n);\n\nexport const selectCurrentTrainingProgress = createSelector([selectSlice],\n  ({ trainingUnit, trainingProgress }) => getKey(trainingUnit?.id, trainingProgress) ?? buildEmptyProgress()\n);\n\nexport const selectCurrentLangProgress = createSelector([selectCurrentLanguage, selectCurrentTrainingProgress],\n  (lang, trainingProgress) => lang !== null ? trainingProgress[lang] : buildEmptyProgress()\n);\n","const configuration = [\n  { score: 0, frequency: 16, minGap: 60 },\n  { score: 1, frequency: 8, minGap: 5*60 },\n  { score: 2, frequency: 4, minGap: 30*60 },\n  { score: 3, frequency: 2, minGap: 3*60*60 },\n  { score: 4, frequency: 1, minGap: 24*60*60 },\n];\n\nexport default configuration;\n","const selectRandom = <T> (\n  elements: T[],\n  weightProjection: (el: T) => number,\n  rand = Math.random()\n): T | null => {\n  const weights = elements.map(el => weightProjection(el));\n  const elementUpperBounds = buildPartialSums(weights);\n  const totalWeight = getLast(elementUpperBounds, 0);\n\n  if (totalWeight === 0) {\n    return null;\n  }\n\n  const selectedValue = rand * totalWeight;\n  const selectedIndex = elementUpperBounds.findIndex(sum => selectedValue <= sum);\n  return elements[selectedIndex];\n};\n\nconst buildPartialSums = (values: number[]): number[] => {\n  const partialSums = new Array(values.length);\n  let ongoingSum = 0;\n  for (let i = 0; i < values.length; i++) {\n    ongoingSum += values[i];\n    partialSums[i] = ongoingSum;\n  }\n  return partialSums;\n};\n\nconst getLast = <T> (array: T[], defaultValue: T): T => {\n  if (array.length > 0) {\n    return array.slice(-1)[0];\n  } else {\n    return defaultValue;\n  }\n};\n\nexport default selectRandom;\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { differenceInSeconds } from 'date-fns';\nimport { LearningUnit } from '../../lexicon/model/learningUnit';\nimport { selectLearningUnits } from '../../lexicon/selectors';\nimport { LangProgress, TrainingProgress } from '../model/trainingProgress';\nimport { TrainingUnit, TrainingUnitLang, TrainingUnitWithPriority } from '../model/trainingUnit';\nimport configuration from './configuration';\nimport selectRandom from './selectRandom';\nimport { buildEmptyProgress } from './trainingProgress';\n\nexport interface State {\n  trainingUnit: TrainingUnit | null;\n  trainingProgress: Record<number, TrainingProgress>;\n}\n\nconst initialState: State = {\n  trainingUnit: null,\n  trainingProgress: {},\n};\n\nexport const select = createAsyncThunk(\n  'train/select',\n  (_, { getState }) => selectLearningUnits(getState())\n);\n\nconst slice = createSlice({\n  name: 'train',\n  initialState,\n  reducers: {\n    pass: (state: State): void => {\n      const progress = getLangProgress(state);\n      progress.score = Math.min(progress.score + 1, 5);\n      progress.lastCorrect = new Date().toISOString();\n      progress.lastTried = progress.lastCorrect;\n    },\n    fail: (state: State): void => {\n      const progress = getLangProgress(state);\n      progress.score = Math.max(progress.score - 1, 0);\n      progress.lastTried = new Date().toISOString();\n    }\n  },\n  extraReducers: {\n    [select.fulfilled.type]: (state, { payload: units }: { payload: LearningUnit[] }): void => {\n      const { trainingProgress } = state;\n      const trainingUnits = units\n        .map(({ id }) => getTrainingUnits(id, trainingProgress[id]))\n        .flat();\n      const selectedUnit = selectRandom(trainingUnits, unit => unit.priority);\n      state.trainingUnit = copyTrainingUnit(selectedUnit);\n    }\n  }\n});\n\nconst getLangProgress = ({ trainingUnit, trainingProgress }: State): LangProgress => {\n  if (trainingUnit === null) {\n    throw new Error('No training unit selected');\n  }\n\n  if (trainingProgress[trainingUnit.id] === undefined) {\n    trainingProgress[trainingUnit.id] = buildEmptyProgress();\n  }\n\n  return trainingProgress[trainingUnit.id][trainingUnit.lang];\n};\n\nconst getTrainingUnits = (id: number, progress: TrainingProgress = buildEmptyProgress()): TrainingUnitWithPriority[] => {\n  const languages: TrainingUnitLang[] = ['de', 'fa'];\n  return languages.map(lang => ({\n    id,\n    lang,\n    priority: getPriority(progress[lang])\n  }));\n};\n\nconst getPriority = ({ score, lastTried }: LangProgress): number => {\n  const config = configuration.find(c => c.score === score);\n  const gap = getDifferenceFromNowInSeconds(lastTried);\n\n  if (config !== undefined && gap > config.minGap) {\n    return config.frequency;\n  } else {\n    return 0;\n  }\n};\n\nconst getDifferenceFromNowInSeconds = (date: string | null): number => {\n  if (date !== null) {\n    return differenceInSeconds(new Date(), new Date(date));\n  } else {\n    return Number.POSITIVE_INFINITY;\n  }\n};\n\nconst copyTrainingUnit = (unit: TrainingUnit | null): TrainingUnit | null => {\n  if (unit !== null) {\n    const { id, lang } = unit;\n    return { id, lang };\n  } else {\n    return null;\n  }\n};\n\nexport const { pass, fail } = slice.actions;\nexport default slice.reducer;\n","import React from 'react';\n\nexport const ArrowDown = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1z\"/>\n  </svg>\n);\n\nexport const ArrowUp = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z\"/>\n  </svg>\n);\n\nexport const Dash = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-dash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8z\"/>\n  </svg>\n);\n\nexport const HourglassSplit = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-hourglass-split\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M2.5 15a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1 0-1h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11zm2-13v1c0 .537.12 1.045.337 1.5h6.326c.216-.455.337-.963.337-1.5V2h-7zm3 6.35c0 .701-.478 1.236-1.011 1.492A3.5 3.5 0 0 0 4.5 13s.866-1.299 3-1.48V8.35zm1 0c0 .701.478 1.236 1.011 1.492A3.5 3.5 0 0 1 11.5 13s-.866-1.299-3-1.48V8.35z\"/>\n  </svg>\n);\n\nexport const Plus = (): JSX.Element => (\n  <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-plus\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fillRule=\"evenodd\" d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\"/>\n  </svg>\n);\n","import React from 'react';\nimport { Dash, Plus } from '../../../../components/Icons';\n\nexport class ToggleText extends React.Component<{\n  title: string;\n  value: string;\n}, {\n  expanded: boolean;\n}> {\n  state = {\n    expanded: false,\n  };\n\n  render(): JSX.Element {\n    const { title, value } = this.props;\n    if (this.state.expanded) {\n      return (\n        <div className=\"cursor-pointer\"\n          onClick={(): void => this.setState({ expanded: false })}\n        >\n          <Dash></Dash> {title}: <em>{value}</em>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"cursor-pointer\"\n          onClick={(): void => this.setState({ expanded: true })}\n        >\n          <Plus></Plus> {title}\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport { ArrowDown, ArrowUp } from '../../../../components/Icons';\nimport './ScoreBadge.scss';\n\nexport const ScoreBadge = ({ score, increased, decreased }: {\n  score: number;\n  increased?: boolean;\n  decreased?: boolean;\n}): JSX.Element => (\n  <span className={`badge rounded-pill score-badge lvl-${score}`}>\n    {decreased && <ArrowDown></ArrowDown>}\n    {increased && <ArrowUp></ArrowUp>}\n    {score}\n  </span>\n);\n","import React from 'react';\nimport { LearningUnit } from '../../../lexicon/model/learningUnit';\nimport { SolutionInputConfig } from '../../model/baseTrainerConfig';\nimport { TestStage } from '../../model/testStage';\nimport { LangProgress } from '../../model/trainingProgress';\nimport { ScoreBadge } from '../ScoreBadge/ScoreBadge';\n\nexport abstract class BaseTrainer extends React.Component<{\n  progress: LangProgress;\n  unit: LearningUnit;\n  fail: () => void;\n  next: () => void;\n  pass: () => void;\n}, {\n  enteredTranslation: string;\n  stage: TestStage;\n}> {\n  private inputRef = React.createRef<HTMLInputElement>();\n  private submitRef = React.createRef<HTMLButtonElement>();\n\n  state = {\n    enteredTranslation: '',\n    stage: TestStage.Initial,\n  };\n\n  componentDidUpdate(): void {\n    if (this.inputRef.current) {\n      this.inputRef.current.focus();\n    } else if (this.submitRef.current) {\n      this.submitRef.current.focus();\n    }\n  }\n\n  render(): JSX.Element {\n    const { unit } = this.props;\n    return (\n      <form onSubmit={(e): void => this.submit(e)}>\n        <h2>Vokabeltrainer</h2>\n        {this.renderTask(unit)}\n        {this.isShowSolution()\n          ? this.renderSolution(unit, this.renderSolutionContent())\n          : this.renderSolutionInput()\n        }\n        {this.renderButtons()}\n      </form>\n    );\n  }\n\n  protected abstract renderTask(unit: LearningUnit): JSX.Element;\n  protected abstract renderSolution(unit: LearningUnit, content: JSX.Element): JSX.Element;\n\n  private renderSolutionContent(): JSX.Element {\n    const { progress } = this.props;\n    return (\n      <React.Fragment>\n        {this.isWrongSolution() && (\n          <React.Fragment>\n            <span className=\"text-danger text-decoration-line-through\">\n              {this.state.enteredTranslation}\n            </span>\n            <span> </span>\n          </React.Fragment>\n        )}\n        <span className={this.isCountingAsSuccess() || this.isWrongSolution() ? 'text-success' : 'text-warning'}>\n          {this.getCorrectSolution()}\n          <ScoreBadge score={progress.score}\n            decreased={this.isCountingAsFailure()}\n            increased={this.isCountingAsSuccess()}\n          ></ScoreBadge>\n        </span>\n      </React.Fragment>\n    );\n  }\n\n  private renderSolutionInput(): JSX.Element {\n    const { label, large } = this.getSolutionInputConfig();\n    return (\n      <div className=\"mb-3\">\n        <label htmlFor=\"solution\">\n          {label}\n        </label>\n        <input type=\"text\"\n          id=\"solution\"\n          className={`form-control${large ? ' text-large' : ''}`}\n          value={this.state.enteredTranslation}\n          ref={this.inputRef}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          autoCapitalize=\"off\"\n          onChange={(e): void => this.setState({ enteredTranslation: e.target.value })}\n        >\n        </input>\n        <div className=\"form-text\">\n          &nbsp;\n        </div>\n      </div>\n    );\n  }\n\n  protected abstract getSolutionInputConfig(): SolutionInputConfig;\n\n  private renderButtons(): JSX.Element {\n    if (this.isShowSolution()) {\n      return (\n        <div className=\"col\">\n          <button type=\"submit\"\n            className=\"btn btn-primary btn-block\"\n            key=\"proceed-btn\"\n            ref={this.submitRef}\n          >\n            Weiter\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <div className=\"row mb-2\">\n            <div className=\"col-6 col-sm-4\">\n              <button type=\"button\"\n                className=\"btn btn-secondary btn-block\"\n                key=\"solve-btn\"\n                onClick={(): void => this.solve()}\n              >\n                Auflösen\n              </button>\n            </div>\n            <div className=\"col-6 col-sm-8\">\n              <button type=\"submit\"\n                className={`btn btn-block ${this.isCountingAsFailure() ? 'btn-warning' : 'btn-primary'}`}\n                key=\"chck-btn\"\n                ref={this.submitRef}\n              >\n                Überprüfen\n              </button>\n            </div>\n          </div>\n          {this.state.stage === TestStage.Initial\n            ? (\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button type=\"button\"\n                    className=\"btn btn-link btn-block\"\n                    key=\"skip-btn\"\n                    onClick={(): void => this.proceed()}\n                  >\n                    Überspringen\n                  </button>\n                </div>\n              </div>\n            ) : ''\n          }\n        </React.Fragment>\n      );\n    }\n  }\n\n  private submit(event: React.FormEvent): void {\n    event.preventDefault();\n    if (this.isShowSolution()) {\n      this.proceed();\n    } else {\n      this.check();\n    }\n  }\n\n  private proceed(): void {\n    this.props.next();\n    this.setState({\n      enteredTranslation: '',\n      stage: TestStage.Initial,\n    });\n  }\n\n  private check(): void {\n    const pass = !this.isWrongSolution();\n    this.reportResult(pass);\n    this.setState({ stage: this.getStageAfterCheck(pass) });\n  }\n\n  private getStageAfterCheck(pass: boolean): TestStage {\n    if (!pass) {\n      return TestStage.Retry;\n    } else if (this.state.stage === TestStage.Initial) {\n      return TestStage.Passed;\n    } else {\n      return TestStage.PassedOnRetry;\n    }\n  }\n\n  private solve(): void {\n    this.reportResult(false);\n    this.setState({ stage: TestStage.Failed });\n  }\n\n  private reportResult(pass: boolean): void {\n    if (this.state.stage !== TestStage.Initial) {\n      return;\n    } else if (pass) {\n      this.props.pass();\n    } else {\n      this.props.fail();\n    }\n  }\n\n  private isShowSolution(): boolean {\n    return [\n      TestStage.Passed,\n      TestStage.PassedOnRetry,\n      TestStage.Failed,\n    ].includes(this.state.stage);\n  }\n\n  private isWrongSolution(): boolean {\n    return this.state.enteredTranslation !== this.getCorrectSolution();\n  }\n\n  protected abstract getCorrectSolution(): string;\n\n  private isCountingAsSuccess(): boolean {\n    return [\n      TestStage.Passed,\n    ].includes(this.state.stage);\n  }\n\n  private isCountingAsFailure(): boolean {\n    return [\n      TestStage.PassedOnRetry,\n      TestStage.Retry,\n      TestStage.Failed,\n    ].includes(this.state.stage);\n  }\n}\n","import React from 'react';\nimport { LearningUnit } from '../../../lexicon/model/learningUnit';\nimport { SolutionInputConfig } from '../../model/baseTrainerConfig';\nimport { ToggleText } from '../ToggleText/ToggleText';\nimport { BaseTrainer } from './BaseTrainer';\n\nexport class FarsiTrainer extends BaseTrainer {\n  renderTask(unit: LearningUnit): JSX.Element {\n    return (\n      <div className=\"mb-3\">\n        <div>\n          Deutsch\n        </div>\n        <div className=\"form-control-plaintext font-weight-bold\">\n          {unit.de}\n        </div>\n        <div className=\"form-text\">\n          <ToggleText title=\"Englisch\" value={unit.en}></ToggleText>\n        </div>\n      </div>\n    );\n  }\n\n  renderSolution(unit: LearningUnit, content: JSX.Element): JSX.Element {\n    return (\n      <div className=\"mb-3\">\n        <div>Persisch</div>\n        <div className=\"form-control-plaintext text-large\">\n          {content}\n        </div>\n        <div className=\"form-text\">\n          <ToggleText title=\"Romanisierung\" value={unit.faRm}></ToggleText>\n        </div>\n      </div>\n    );\n  }\n\n  getSolutionInputConfig(): SolutionInputConfig {\n    return {\n      label: 'Persisch',\n      large: true,\n    };\n  }\n\n  getCorrectSolution(): string {\n    return this.props.unit.fa;\n  }\n}\n","import React from 'react';\nimport { LearningUnit } from '../../../lexicon/model/learningUnit';\nimport { SolutionInputConfig } from '../../model/baseTrainerConfig';\nimport { ToggleText } from '../ToggleText/ToggleText';\nimport { BaseTrainer } from './BaseTrainer';\n\nexport class GermanTrainer extends BaseTrainer {\n  renderTask(unit: LearningUnit): JSX.Element {\n    return (\n      <div className=\"mb-3\">\n        <div>\n          Persisch\n        </div>\n        <div className=\"form-control-plaintext text-large\">\n          {unit.fa}\n        </div>\n        <div className=\"form-text\">\n          <ToggleText title=\"Romanisierung\" value={unit.faRm}></ToggleText>\n        </div>\n      </div>\n    );\n  }\n\n  renderSolution(unit: LearningUnit, content: JSX.Element): JSX.Element {\n    return (\n      <div className=\"mb-3\">\n        <div>\n          Deutsch\n        </div>\n        <div className=\"form-control-plaintext\">\n          {content}\n        </div>\n        <div className=\"form-text\">\n          <ToggleText title=\"Englisch\" value={unit.en}></ToggleText>\n        </div>\n      </div>\n    );\n  }\n\n  getSolutionInputConfig(): SolutionInputConfig {\n    return {\n      label: 'Deutsch',\n      large: false,\n    };\n  }\n\n  getCorrectSolution(): string {\n    return this.props.unit.de;\n  }\n}\n","import React, { FormEvent } from 'react';\nimport { HourglassSplit } from '../../../../components/Icons';\nimport './NoTraining.scss';\n\nexport const NoTraining = (props: {\n  next: () => void;\n}): JSX.Element => (\n  <form onSubmit={(e: FormEvent): void => { e.preventDefault(); props.next(); }}>\n    <div className=\"no-training\">\n      <HourglassSplit></HourglassSplit>\n      <p>Zur Zeit gibt es nichts zu üben.</p>\n      <button type=\"submit\" className=\"btn btn-primary\">\n        Aktualisieren\n      </button>\n    </div>\n  </form>\n);\n","import React from 'react';\nimport { LearningUnit } from '../../../lexicon/model/learningUnit';\nimport { LangProgress } from '../../model/trainingProgress';\nimport { TrainingUnitLang } from '../../model/trainingUnit';\nimport { FarsiTrainer } from '../LangTrainer/FarsiTrainer';\nimport { GermanTrainer } from '../LangTrainer/GermanTrainer';\nimport { NoTraining } from '../NoTraining/NoTraining';\n\nexport class Trainer extends React.Component<{\n  lang: TrainingUnitLang | null;\n  progress: LangProgress;\n  unit: LearningUnit | null;\n  fail: () => void;\n  next: () => void;\n  pass: () => void;\n}> {\n  componentDidMount(): void {\n    this.props.next();\n  }\n\n  render(): JSX.Element {\n    const { lang, progress, unit, fail, next, pass } = this.props;\n    if (lang === 'de' && unit !== null) {\n      return <GermanTrainer\n        unit={unit}\n        progress={progress}\n        pass={pass}\n        fail={fail}\n        next={next}\n      ></GermanTrainer>;\n    } else if (lang === 'fa' && unit !== null) {\n      return <FarsiTrainer\n        unit={unit}\n        progress={progress}\n        pass={pass}\n        fail={fail}\n        next={next}\n      ></FarsiTrainer>;\n    } else {\n      return <NoTraining\n        next={this.props.next}\n      ></NoTraining>;\n    }\n  }\n}\n","import { connect } from 'react-redux';\nimport { selectCurrentLangProgress, selectCurrentLanguage, selectCurrentLearningUnit } from '../../selectors';\nimport { fail, pass, select } from '../../slice';\nimport { Trainer } from './Trainer';\n\nconst mapStateToProps = (state: any): any => ({\n  lang: selectCurrentLanguage(state),\n  progress: selectCurrentLangProgress(state),\n  unit: selectCurrentLearningUnit(state),\n});\n\nconst mapDispatchToProps = {\n  fail: fail,\n  next: select,\n  pass: pass,\n};\n\nexport const TrainerContainer =\n  connect(mapStateToProps, mapDispatchToProps)(Trainer);\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { TrainerContainer } from '../components/Trainer/TrainerContainer';\n\nexport default [\n  <Route key=\"trainer\"\n    path=\"/trainer\"\n    component={TrainerContainer}>\n  </Route>,\n];\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport trainer from '../features/trainer/routes';\n\nexport default [\n  ...trainer,\n  <Redirect key=\"root\"\n    from=\"/\"\n    to=\"/trainer\">\n  </Redirect>\n];\n","import { Collapse } from 'bootstrap';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Header extends React.Component {\n  private collapseRef = React.createRef<HTMLDivElement>();\n  private collapse?: Collapse;\n\n  componentDidMount(): void {\n    if (this.collapseRef.current) {\n      this.collapse = new Collapse(this.collapseRef.current, {\n        toggle: false\n      });\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <nav className=\"navbar navbar-expand-md navbar-dark bg-primary mb-2\">\n        <div className=\"container\">\n          <span className=\"navbar-brand mb-0 h1\">\n            Persian Learner\n          </span>\n          <button type=\"button\"\n            className=\"navbar-toggler\"\n            onClick={(): void => this.collapse?.toggle()}\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div\n            id=\"navbar-content\"\n            className=\"collapse navbar-collapse\"\n            ref={this.collapseRef}\n          >\n            <ul className=\"navbar-nav mr-auto mb-0\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\"\n                  to=\"/trainer\"\n                  onClick={(): void => this.collapse?.hide()}\n                >\n                  Trainer\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ToastrContainer } from '../features/notification/components/Toastr/ToastrContainer';\nimport routes from '../routes';\nimport { Header } from './Header';\n\nexport class App extends React.Component {\n  render(): JSX.Element {\n    return (\n      <BrowserRouter basename={process.env.REACT_APP_BASE_HREF}>\n        <header>\n          <Header></Header>\n        </header>\n        <main className=\"container\">\n          { routes }\n          <ToastrContainer></ToastrContainer>\n        </main>\n      </BrowserRouter>\n    );\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit';\nimport { LearningUnit } from '../model/learningUnit';\nimport vocabulary from './vocabulary.json';\n\nexport interface State {\n  units: Record<number, LearningUnit>;\n}\n\nconst initialState: State = {\n  units: Object.fromEntries(\n    (vocabulary as LearningUnit[]).map(v => [v.id, v])\n  )\n};\n\nconst slice = createSlice({\n  name: 'lexicon',\n  initialState,\n  reducers: {\n  }\n});\n\nexport default slice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport lexicon from '../features/lexicon/slice';\nimport notification from '../features/notification/slice';\nimport trainer from '../features/trainer/slice';\n\nconst rootReducer = combineReducers({\n  lexicon,\n  notification,\n  trainer,\n});\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = (): void => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = (): void => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Single Page Apps for GitHub Pages\n// MIT License\n// https://github.com/rafgraph/spa-github-pages\n// This script checks to see if a redirect is present in the query string,\n// converts it back into the correct url and adds it to the\n// browser's history using window.history.replaceState(...),\n// which won't cause the browser to attempt to load the new url.\n// When the single page app is loaded further down in this file,\n// the correct url will be waiting in the browser's history for\n// the single page app to route accordingly.\n\nexport default (): void => {\n  const location = window.location;\n  if (location.search[1] === '/' ) {\n    const decoded = location.search\n      .slice(1)\n      .split('&')\n      .map((s) => s.replace(/~and~/g, '&'))\n      .join('?');\n    const replaceUrl = location.pathname.slice(0, -1) + decoded + location.hash;\n    window.history.replaceState(null, null as any, replaceUrl);\n  }\n};\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { FLUSH, PAUSE, PERSIST, persistReducer, persistStore, PURGE, REGISTER, REHYDRATE } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport storage from 'redux-persist/lib/storage';\nimport { version } from '../package.json';\nimport { App } from './components/App';\nimport decodeUrl from './decodeUrl';\nimport { addNotification } from './features/notification/slice';\nimport './index.scss';\nimport reducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nif (process.env.NODE_ENV === 'production') {\n  decodeUrl();\n}\n\nconst persistedReducer = persistReducer({\n  key: 'root',\n  storage,\n  version: 1\n}, reducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <span className=\"version\" hidden>\n      {version}-{process.env.NODE_ENV}\n    </span>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register({\n  onSuccess: () => store.dispatch(addNotification('Caching abgeschlossen. Die App funktioniert jetzt auch offline!')),\n  onUpdate: () => store.dispatch(addNotification('Neue Version verfügbar. Zum Update bitte alle Tabs der App schließen!')),\n});\n"],"sourceRoot":""}